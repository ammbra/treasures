// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _object {
 *     Py_ssize_t ob_refcnt;
 *     PyTypeObject *ob_type;
 * }
 * }
 */
public class _object {

    _object() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_LONG.withName("ob_refcnt"),
        Python_h.C_POINTER.withName("ob_type")
    ).withName("_object");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong ob_refcnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ob_refcnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_refcnt
     * }
     */
    public static final OfLong ob_refcnt$layout() {
        return ob_refcnt$LAYOUT;
    }

    private static final long ob_refcnt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_refcnt
     * }
     */
    public static final long ob_refcnt$offset() {
        return ob_refcnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_refcnt
     * }
     */
    public static long ob_refcnt(MemorySegment struct) {
        return struct.get(ob_refcnt$LAYOUT, ob_refcnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_refcnt
     * }
     */
    public static void ob_refcnt(MemorySegment struct, long fieldValue) {
        struct.set(ob_refcnt$LAYOUT, ob_refcnt$OFFSET, fieldValue);
    }

    private static final AddressLayout ob_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ob_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyTypeObject *ob_type
     * }
     */
    public static final AddressLayout ob_type$layout() {
        return ob_type$LAYOUT;
    }

    private static final long ob_type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyTypeObject *ob_type
     * }
     */
    public static final long ob_type$offset() {
        return ob_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyTypeObject *ob_type
     * }
     */
    public static MemorySegment ob_type(MemorySegment struct) {
        return struct.get(ob_type$LAYOUT, ob_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyTypeObject *ob_type
     * }
     */
    public static void ob_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ob_type$LAYOUT, ob_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

