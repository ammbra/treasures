// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ts {
 *     PyThreadState *prev;
 *     PyThreadState *next;
 *     PyInterpreterState *interp;
 *     int _initialized;
 *     int _static;
 *     int recursion_remaining;
 *     int recursion_limit;
 *     int recursion_headroom;
 *     int tracing;
 *     int tracing_what;
 *     _PyCFrame *cframe;
 *     Py_tracefunc c_profilefunc;
 *     Py_tracefunc c_tracefunc;
 *     PyObject *c_profileobj;
 *     PyObject *c_traceobj;
 *     PyObject *curexc_type;
 *     PyObject *curexc_value;
 *     PyObject *curexc_traceback;
 *     _PyErr_StackItem *exc_info;
 *     PyObject *dict;
 *     int gilstate_counter;
 *     PyObject *async_exc;
 *     unsigned long thread_id;
 *     unsigned long native_thread_id;
 *     int trash_delete_nesting;
 *     PyObject *trash_delete_later;
 *     void (*on_delete)(void *);
 *     void *on_delete_data;
 *     int coroutine_origin_tracking_depth;
 *     PyObject *async_gen_firstiter;
 *     PyObject *async_gen_finalizer;
 *     PyObject *context;
 *     uint64_t context_ver;
 *     uint64_t id;
 *     PyTraceInfo trace_info;
 *     _PyStackChunk *datastack_chunk;
 *     PyObject **datastack_top;
 *     PyObject **datastack_limit;
 *     _PyErr_StackItem exc_state;
 *     _PyCFrame root_cframe;
 * }
 * }
 */
public class _ts {

    _ts() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("prev"),
        Python_h.C_POINTER.withName("next"),
        Python_h.C_POINTER.withName("interp"),
        Python_h.C_INT.withName("_initialized"),
        Python_h.C_INT.withName("_static"),
        Python_h.C_INT.withName("recursion_remaining"),
        Python_h.C_INT.withName("recursion_limit"),
        Python_h.C_INT.withName("recursion_headroom"),
        Python_h.C_INT.withName("tracing"),
        Python_h.C_INT.withName("tracing_what"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("cframe"),
        Python_h.C_POINTER.withName("c_profilefunc"),
        Python_h.C_POINTER.withName("c_tracefunc"),
        Python_h.C_POINTER.withName("c_profileobj"),
        Python_h.C_POINTER.withName("c_traceobj"),
        Python_h.C_POINTER.withName("curexc_type"),
        Python_h.C_POINTER.withName("curexc_value"),
        Python_h.C_POINTER.withName("curexc_traceback"),
        Python_h.C_POINTER.withName("exc_info"),
        Python_h.C_POINTER.withName("dict"),
        Python_h.C_INT.withName("gilstate_counter"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("async_exc"),
        Python_h.C_LONG.withName("thread_id"),
        Python_h.C_LONG.withName("native_thread_id"),
        Python_h.C_INT.withName("trash_delete_nesting"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("trash_delete_later"),
        Python_h.C_POINTER.withName("on_delete"),
        Python_h.C_POINTER.withName("on_delete_data"),
        Python_h.C_INT.withName("coroutine_origin_tracking_depth"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("async_gen_firstiter"),
        Python_h.C_POINTER.withName("async_gen_finalizer"),
        Python_h.C_POINTER.withName("context"),
        Python_h.C_LONG_LONG.withName("context_ver"),
        Python_h.C_LONG_LONG.withName("id"),
        PyTraceInfo.layout().withName("trace_info"),
        Python_h.C_POINTER.withName("datastack_chunk"),
        Python_h.C_POINTER.withName("datastack_top"),
        Python_h.C_POINTER.withName("datastack_limit"),
        _err_stackitem.layout().withName("exc_state"),
        _PyCFrame.layout().withName("root_cframe")
    ).withName("_ts");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout prev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static final AddressLayout prev$layout() {
        return prev$LAYOUT;
    }

    private static final long prev$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static final long prev$offset() {
        return prev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static MemorySegment prev(MemorySegment struct) {
        return struct.get(prev$LAYOUT, prev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static void prev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prev$LAYOUT, prev$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout interp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("interp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static final AddressLayout interp$layout() {
        return interp$LAYOUT;
    }

    private static final long interp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static final long interp$offset() {
        return interp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static MemorySegment interp(MemorySegment struct) {
        return struct.get(interp$LAYOUT, interp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static void interp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(interp$LAYOUT, interp$OFFSET, fieldValue);
    }

    private static final OfInt _initialized$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_initialized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _initialized
     * }
     */
    public static final OfInt _initialized$layout() {
        return _initialized$LAYOUT;
    }

    private static final long _initialized$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _initialized
     * }
     */
    public static final long _initialized$offset() {
        return _initialized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _initialized
     * }
     */
    public static int _initialized(MemorySegment struct) {
        return struct.get(_initialized$LAYOUT, _initialized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _initialized
     * }
     */
    public static void _initialized(MemorySegment struct, int fieldValue) {
        struct.set(_initialized$LAYOUT, _initialized$OFFSET, fieldValue);
    }

    private static final OfInt _static$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_static"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _static
     * }
     */
    public static final OfInt _static$layout() {
        return _static$LAYOUT;
    }

    private static final long _static$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _static
     * }
     */
    public static final long _static$offset() {
        return _static$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _static
     * }
     */
    public static int _static(MemorySegment struct) {
        return struct.get(_static$LAYOUT, _static$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _static
     * }
     */
    public static void _static(MemorySegment struct, int fieldValue) {
        struct.set(_static$LAYOUT, _static$OFFSET, fieldValue);
    }

    private static final OfInt recursion_remaining$LAYOUT = (OfInt)$LAYOUT.select(groupElement("recursion_remaining"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int recursion_remaining
     * }
     */
    public static final OfInt recursion_remaining$layout() {
        return recursion_remaining$LAYOUT;
    }

    private static final long recursion_remaining$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int recursion_remaining
     * }
     */
    public static final long recursion_remaining$offset() {
        return recursion_remaining$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int recursion_remaining
     * }
     */
    public static int recursion_remaining(MemorySegment struct) {
        return struct.get(recursion_remaining$LAYOUT, recursion_remaining$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int recursion_remaining
     * }
     */
    public static void recursion_remaining(MemorySegment struct, int fieldValue) {
        struct.set(recursion_remaining$LAYOUT, recursion_remaining$OFFSET, fieldValue);
    }

    private static final OfInt recursion_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("recursion_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int recursion_limit
     * }
     */
    public static final OfInt recursion_limit$layout() {
        return recursion_limit$LAYOUT;
    }

    private static final long recursion_limit$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int recursion_limit
     * }
     */
    public static final long recursion_limit$offset() {
        return recursion_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int recursion_limit
     * }
     */
    public static int recursion_limit(MemorySegment struct) {
        return struct.get(recursion_limit$LAYOUT, recursion_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int recursion_limit
     * }
     */
    public static void recursion_limit(MemorySegment struct, int fieldValue) {
        struct.set(recursion_limit$LAYOUT, recursion_limit$OFFSET, fieldValue);
    }

    private static final OfInt recursion_headroom$LAYOUT = (OfInt)$LAYOUT.select(groupElement("recursion_headroom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static final OfInt recursion_headroom$layout() {
        return recursion_headroom$LAYOUT;
    }

    private static final long recursion_headroom$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static final long recursion_headroom$offset() {
        return recursion_headroom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static int recursion_headroom(MemorySegment struct) {
        return struct.get(recursion_headroom$LAYOUT, recursion_headroom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static void recursion_headroom(MemorySegment struct, int fieldValue) {
        struct.set(recursion_headroom$LAYOUT, recursion_headroom$OFFSET, fieldValue);
    }

    private static final OfInt tracing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tracing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static final OfInt tracing$layout() {
        return tracing$LAYOUT;
    }

    private static final long tracing$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static final long tracing$offset() {
        return tracing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static int tracing(MemorySegment struct) {
        return struct.get(tracing$LAYOUT, tracing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static void tracing(MemorySegment struct, int fieldValue) {
        struct.set(tracing$LAYOUT, tracing$OFFSET, fieldValue);
    }

    private static final OfInt tracing_what$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tracing_what"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tracing_what
     * }
     */
    public static final OfInt tracing_what$layout() {
        return tracing_what$LAYOUT;
    }

    private static final long tracing_what$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tracing_what
     * }
     */
    public static final long tracing_what$offset() {
        return tracing_what$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tracing_what
     * }
     */
    public static int tracing_what(MemorySegment struct) {
        return struct.get(tracing_what$LAYOUT, tracing_what$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tracing_what
     * }
     */
    public static void tracing_what(MemorySegment struct, int fieldValue) {
        struct.set(tracing_what$LAYOUT, tracing_what$OFFSET, fieldValue);
    }

    private static final AddressLayout cframe$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cframe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyCFrame *cframe
     * }
     */
    public static final AddressLayout cframe$layout() {
        return cframe$LAYOUT;
    }

    private static final long cframe$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyCFrame *cframe
     * }
     */
    public static final long cframe$offset() {
        return cframe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyCFrame *cframe
     * }
     */
    public static MemorySegment cframe(MemorySegment struct) {
        return struct.get(cframe$LAYOUT, cframe$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyCFrame *cframe
     * }
     */
    public static void cframe(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cframe$LAYOUT, cframe$OFFSET, fieldValue);
    }

    private static final AddressLayout c_profilefunc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_profilefunc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static final AddressLayout c_profilefunc$layout() {
        return c_profilefunc$LAYOUT;
    }

    private static final long c_profilefunc$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static final long c_profilefunc$offset() {
        return c_profilefunc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static MemorySegment c_profilefunc(MemorySegment struct) {
        return struct.get(c_profilefunc$LAYOUT, c_profilefunc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static void c_profilefunc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_profilefunc$LAYOUT, c_profilefunc$OFFSET, fieldValue);
    }

    private static final AddressLayout c_tracefunc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_tracefunc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static final AddressLayout c_tracefunc$layout() {
        return c_tracefunc$LAYOUT;
    }

    private static final long c_tracefunc$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static final long c_tracefunc$offset() {
        return c_tracefunc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static MemorySegment c_tracefunc(MemorySegment struct) {
        return struct.get(c_tracefunc$LAYOUT, c_tracefunc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static void c_tracefunc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_tracefunc$LAYOUT, c_tracefunc$OFFSET, fieldValue);
    }

    private static final AddressLayout c_profileobj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_profileobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static final AddressLayout c_profileobj$layout() {
        return c_profileobj$LAYOUT;
    }

    private static final long c_profileobj$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static final long c_profileobj$offset() {
        return c_profileobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static MemorySegment c_profileobj(MemorySegment struct) {
        return struct.get(c_profileobj$LAYOUT, c_profileobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static void c_profileobj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_profileobj$LAYOUT, c_profileobj$OFFSET, fieldValue);
    }

    private static final AddressLayout c_traceobj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_traceobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static final AddressLayout c_traceobj$layout() {
        return c_traceobj$LAYOUT;
    }

    private static final long c_traceobj$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static final long c_traceobj$offset() {
        return c_traceobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static MemorySegment c_traceobj(MemorySegment struct) {
        return struct.get(c_traceobj$LAYOUT, c_traceobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static void c_traceobj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_traceobj$LAYOUT, c_traceobj$OFFSET, fieldValue);
    }

    private static final AddressLayout curexc_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("curexc_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *curexc_type
     * }
     */
    public static final AddressLayout curexc_type$layout() {
        return curexc_type$LAYOUT;
    }

    private static final long curexc_type$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *curexc_type
     * }
     */
    public static final long curexc_type$offset() {
        return curexc_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *curexc_type
     * }
     */
    public static MemorySegment curexc_type(MemorySegment struct) {
        return struct.get(curexc_type$LAYOUT, curexc_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *curexc_type
     * }
     */
    public static void curexc_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(curexc_type$LAYOUT, curexc_type$OFFSET, fieldValue);
    }

    private static final AddressLayout curexc_value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("curexc_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *curexc_value
     * }
     */
    public static final AddressLayout curexc_value$layout() {
        return curexc_value$LAYOUT;
    }

    private static final long curexc_value$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *curexc_value
     * }
     */
    public static final long curexc_value$offset() {
        return curexc_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *curexc_value
     * }
     */
    public static MemorySegment curexc_value(MemorySegment struct) {
        return struct.get(curexc_value$LAYOUT, curexc_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *curexc_value
     * }
     */
    public static void curexc_value(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(curexc_value$LAYOUT, curexc_value$OFFSET, fieldValue);
    }

    private static final AddressLayout curexc_traceback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("curexc_traceback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *curexc_traceback
     * }
     */
    public static final AddressLayout curexc_traceback$layout() {
        return curexc_traceback$LAYOUT;
    }

    private static final long curexc_traceback$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *curexc_traceback
     * }
     */
    public static final long curexc_traceback$offset() {
        return curexc_traceback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *curexc_traceback
     * }
     */
    public static MemorySegment curexc_traceback(MemorySegment struct) {
        return struct.get(curexc_traceback$LAYOUT, curexc_traceback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *curexc_traceback
     * }
     */
    public static void curexc_traceback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(curexc_traceback$LAYOUT, curexc_traceback$OFFSET, fieldValue);
    }

    private static final AddressLayout exc_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("exc_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static final AddressLayout exc_info$layout() {
        return exc_info$LAYOUT;
    }

    private static final long exc_info$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static final long exc_info$offset() {
        return exc_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static MemorySegment exc_info(MemorySegment struct) {
        return struct.get(exc_info$LAYOUT, exc_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static void exc_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(exc_info$LAYOUT, exc_info$OFFSET, fieldValue);
    }

    private static final AddressLayout dict$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dict"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static final AddressLayout dict$layout() {
        return dict$LAYOUT;
    }

    private static final long dict$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static final long dict$offset() {
        return dict$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static MemorySegment dict(MemorySegment struct) {
        return struct.get(dict$LAYOUT, dict$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static void dict(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dict$LAYOUT, dict$OFFSET, fieldValue);
    }

    private static final OfInt gilstate_counter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gilstate_counter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static final OfInt gilstate_counter$layout() {
        return gilstate_counter$LAYOUT;
    }

    private static final long gilstate_counter$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static final long gilstate_counter$offset() {
        return gilstate_counter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static int gilstate_counter(MemorySegment struct) {
        return struct.get(gilstate_counter$LAYOUT, gilstate_counter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static void gilstate_counter(MemorySegment struct, int fieldValue) {
        struct.set(gilstate_counter$LAYOUT, gilstate_counter$OFFSET, fieldValue);
    }

    private static final AddressLayout async_exc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_exc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static final AddressLayout async_exc$layout() {
        return async_exc$LAYOUT;
    }

    private static final long async_exc$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static final long async_exc$offset() {
        return async_exc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static MemorySegment async_exc(MemorySegment struct) {
        return struct.get(async_exc$LAYOUT, async_exc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static void async_exc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_exc$LAYOUT, async_exc$OFFSET, fieldValue);
    }

    private static final OfLong thread_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static final OfLong thread_id$layout() {
        return thread_id$LAYOUT;
    }

    private static final long thread_id$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static final long thread_id$offset() {
        return thread_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static long thread_id(MemorySegment struct) {
        return struct.get(thread_id$LAYOUT, thread_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static void thread_id(MemorySegment struct, long fieldValue) {
        struct.set(thread_id$LAYOUT, thread_id$OFFSET, fieldValue);
    }

    private static final OfLong native_thread_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("native_thread_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static final OfLong native_thread_id$layout() {
        return native_thread_id$LAYOUT;
    }

    private static final long native_thread_id$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static final long native_thread_id$offset() {
        return native_thread_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static long native_thread_id(MemorySegment struct) {
        return struct.get(native_thread_id$LAYOUT, native_thread_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static void native_thread_id(MemorySegment struct, long fieldValue) {
        struct.set(native_thread_id$LAYOUT, native_thread_id$OFFSET, fieldValue);
    }

    private static final OfInt trash_delete_nesting$LAYOUT = (OfInt)$LAYOUT.select(groupElement("trash_delete_nesting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int trash_delete_nesting
     * }
     */
    public static final OfInt trash_delete_nesting$layout() {
        return trash_delete_nesting$LAYOUT;
    }

    private static final long trash_delete_nesting$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int trash_delete_nesting
     * }
     */
    public static final long trash_delete_nesting$offset() {
        return trash_delete_nesting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int trash_delete_nesting
     * }
     */
    public static int trash_delete_nesting(MemorySegment struct) {
        return struct.get(trash_delete_nesting$LAYOUT, trash_delete_nesting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int trash_delete_nesting
     * }
     */
    public static void trash_delete_nesting(MemorySegment struct, int fieldValue) {
        struct.set(trash_delete_nesting$LAYOUT, trash_delete_nesting$OFFSET, fieldValue);
    }

    private static final AddressLayout trash_delete_later$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trash_delete_later"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *trash_delete_later
     * }
     */
    public static final AddressLayout trash_delete_later$layout() {
        return trash_delete_later$LAYOUT;
    }

    private static final long trash_delete_later$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *trash_delete_later
     * }
     */
    public static final long trash_delete_later$offset() {
        return trash_delete_later$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *trash_delete_later
     * }
     */
    public static MemorySegment trash_delete_later(MemorySegment struct) {
        return struct.get(trash_delete_later$LAYOUT, trash_delete_later$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *trash_delete_later
     * }
     */
    public static void trash_delete_later(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trash_delete_later$LAYOUT, trash_delete_later$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*on_delete)(void *)
     * }
     */
    public static class on_delete {

        on_delete() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            Python_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Python_h.upcallHandle(on_delete.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(on_delete.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout on_delete$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("on_delete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*on_delete)(void *)
     * }
     */
    public static final AddressLayout on_delete$layout() {
        return on_delete$LAYOUT;
    }

    private static final long on_delete$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*on_delete)(void *)
     * }
     */
    public static final long on_delete$offset() {
        return on_delete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*on_delete)(void *)
     * }
     */
    public static MemorySegment on_delete(MemorySegment struct) {
        return struct.get(on_delete$LAYOUT, on_delete$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*on_delete)(void *)
     * }
     */
    public static void on_delete(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(on_delete$LAYOUT, on_delete$OFFSET, fieldValue);
    }

    private static final AddressLayout on_delete_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("on_delete_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *on_delete_data
     * }
     */
    public static final AddressLayout on_delete_data$layout() {
        return on_delete_data$LAYOUT;
    }

    private static final long on_delete_data$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *on_delete_data
     * }
     */
    public static final long on_delete_data$offset() {
        return on_delete_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *on_delete_data
     * }
     */
    public static MemorySegment on_delete_data(MemorySegment struct) {
        return struct.get(on_delete_data$LAYOUT, on_delete_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *on_delete_data
     * }
     */
    public static void on_delete_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(on_delete_data$LAYOUT, on_delete_data$OFFSET, fieldValue);
    }

    private static final OfInt coroutine_origin_tracking_depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coroutine_origin_tracking_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static final OfInt coroutine_origin_tracking_depth$layout() {
        return coroutine_origin_tracking_depth$LAYOUT;
    }

    private static final long coroutine_origin_tracking_depth$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static final long coroutine_origin_tracking_depth$offset() {
        return coroutine_origin_tracking_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static int coroutine_origin_tracking_depth(MemorySegment struct) {
        return struct.get(coroutine_origin_tracking_depth$LAYOUT, coroutine_origin_tracking_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static void coroutine_origin_tracking_depth(MemorySegment struct, int fieldValue) {
        struct.set(coroutine_origin_tracking_depth$LAYOUT, coroutine_origin_tracking_depth$OFFSET, fieldValue);
    }

    private static final AddressLayout async_gen_firstiter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_gen_firstiter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static final AddressLayout async_gen_firstiter$layout() {
        return async_gen_firstiter$LAYOUT;
    }

    private static final long async_gen_firstiter$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static final long async_gen_firstiter$offset() {
        return async_gen_firstiter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static MemorySegment async_gen_firstiter(MemorySegment struct) {
        return struct.get(async_gen_firstiter$LAYOUT, async_gen_firstiter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static void async_gen_firstiter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_gen_firstiter$LAYOUT, async_gen_firstiter$OFFSET, fieldValue);
    }

    private static final AddressLayout async_gen_finalizer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_gen_finalizer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static final AddressLayout async_gen_finalizer$layout() {
        return async_gen_finalizer$LAYOUT;
    }

    private static final long async_gen_finalizer$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static final long async_gen_finalizer$offset() {
        return async_gen_finalizer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static MemorySegment async_gen_finalizer(MemorySegment struct) {
        return struct.get(async_gen_finalizer$LAYOUT, async_gen_finalizer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static void async_gen_finalizer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_gen_finalizer$LAYOUT, async_gen_finalizer$OFFSET, fieldValue);
    }

    private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static final AddressLayout context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static MemorySegment context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static void context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    private static final OfLong context_ver$LAYOUT = (OfLong)$LAYOUT.select(groupElement("context_ver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static final OfLong context_ver$layout() {
        return context_ver$LAYOUT;
    }

    private static final long context_ver$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static final long context_ver$offset() {
        return context_ver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static long context_ver(MemorySegment struct) {
        return struct.get(context_ver$LAYOUT, context_ver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static void context_ver(MemorySegment struct, long fieldValue) {
        struct.set(context_ver$LAYOUT, context_ver$OFFSET, fieldValue);
    }

    private static final OfLong id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static final OfLong id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static long id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static void id(MemorySegment struct, long fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final GroupLayout trace_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("trace_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyTraceInfo trace_info
     * }
     */
    public static final GroupLayout trace_info$layout() {
        return trace_info$LAYOUT;
    }

    private static final long trace_info$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyTraceInfo trace_info
     * }
     */
    public static final long trace_info$offset() {
        return trace_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyTraceInfo trace_info
     * }
     */
    public static MemorySegment trace_info(MemorySegment struct) {
        return struct.asSlice(trace_info$OFFSET, trace_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyTraceInfo trace_info
     * }
     */
    public static void trace_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, trace_info$OFFSET, trace_info$LAYOUT.byteSize());
    }

    private static final AddressLayout datastack_chunk$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_chunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static final AddressLayout datastack_chunk$layout() {
        return datastack_chunk$LAYOUT;
    }

    private static final long datastack_chunk$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static final long datastack_chunk$offset() {
        return datastack_chunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static MemorySegment datastack_chunk(MemorySegment struct) {
        return struct.get(datastack_chunk$LAYOUT, datastack_chunk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static void datastack_chunk(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_chunk$LAYOUT, datastack_chunk$OFFSET, fieldValue);
    }

    private static final AddressLayout datastack_top$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_top"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static final AddressLayout datastack_top$layout() {
        return datastack_top$LAYOUT;
    }

    private static final long datastack_top$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static final long datastack_top$offset() {
        return datastack_top$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static MemorySegment datastack_top(MemorySegment struct) {
        return struct.get(datastack_top$LAYOUT, datastack_top$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static void datastack_top(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_top$LAYOUT, datastack_top$OFFSET, fieldValue);
    }

    private static final AddressLayout datastack_limit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static final AddressLayout datastack_limit$layout() {
        return datastack_limit$LAYOUT;
    }

    private static final long datastack_limit$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static final long datastack_limit$offset() {
        return datastack_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static MemorySegment datastack_limit(MemorySegment struct) {
        return struct.get(datastack_limit$LAYOUT, datastack_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static void datastack_limit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_limit$LAYOUT, datastack_limit$OFFSET, fieldValue);
    }

    private static final GroupLayout exc_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exc_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static final GroupLayout exc_state$layout() {
        return exc_state$LAYOUT;
    }

    private static final long exc_state$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static final long exc_state$offset() {
        return exc_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static MemorySegment exc_state(MemorySegment struct) {
        return struct.asSlice(exc_state$OFFSET, exc_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static void exc_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, exc_state$OFFSET, exc_state$LAYOUT.byteSize());
    }

    private static final GroupLayout root_cframe$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("root_cframe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyCFrame root_cframe
     * }
     */
    public static final GroupLayout root_cframe$layout() {
        return root_cframe$LAYOUT;
    }

    private static final long root_cframe$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyCFrame root_cframe
     * }
     */
    public static final long root_cframe$offset() {
        return root_cframe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyCFrame root_cframe
     * }
     */
    public static MemorySegment root_cframe(MemorySegment struct) {
        return struct.asSlice(root_cframe$OFFSET, root_cframe$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyCFrame root_cframe
     * }
     */
    public static void root_cframe(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, root_cframe$OFFSET, root_cframe$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

