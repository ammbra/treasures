// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject *buffer;
 *     Py_ssize_t allocated;
 *     Py_ssize_t min_size;
 *     int use_bytearray;
 *     int overallocate;
 *     int use_small_buffer;
 *     char small_buffer[512];
 * }
 * }
 */
public class _PyBytesWriter {

    _PyBytesWriter() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("buffer"),
        Python_h.C_LONG.withName("allocated"),
        Python_h.C_LONG.withName("min_size"),
        Python_h.C_INT.withName("use_bytearray"),
        Python_h.C_INT.withName("overallocate"),
        Python_h.C_INT.withName("use_small_buffer"),
        MemoryLayout.sequenceLayout(512, Python_h.C_CHAR).withName("small_buffer"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$59:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfLong allocated$LAYOUT = (OfLong)$LAYOUT.select(groupElement("allocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t allocated
     * }
     */
    public static final OfLong allocated$layout() {
        return allocated$LAYOUT;
    }

    private static final long allocated$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t allocated
     * }
     */
    public static final long allocated$offset() {
        return allocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t allocated
     * }
     */
    public static long allocated(MemorySegment struct) {
        return struct.get(allocated$LAYOUT, allocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t allocated
     * }
     */
    public static void allocated(MemorySegment struct, long fieldValue) {
        struct.set(allocated$LAYOUT, allocated$OFFSET, fieldValue);
    }

    private static final OfLong min_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("min_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t min_size
     * }
     */
    public static final OfLong min_size$layout() {
        return min_size$LAYOUT;
    }

    private static final long min_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t min_size
     * }
     */
    public static final long min_size$offset() {
        return min_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t min_size
     * }
     */
    public static long min_size(MemorySegment struct) {
        return struct.get(min_size$LAYOUT, min_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t min_size
     * }
     */
    public static void min_size(MemorySegment struct, long fieldValue) {
        struct.set(min_size$LAYOUT, min_size$OFFSET, fieldValue);
    }

    private static final OfInt use_bytearray$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_bytearray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_bytearray
     * }
     */
    public static final OfInt use_bytearray$layout() {
        return use_bytearray$LAYOUT;
    }

    private static final long use_bytearray$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_bytearray
     * }
     */
    public static final long use_bytearray$offset() {
        return use_bytearray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_bytearray
     * }
     */
    public static int use_bytearray(MemorySegment struct) {
        return struct.get(use_bytearray$LAYOUT, use_bytearray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_bytearray
     * }
     */
    public static void use_bytearray(MemorySegment struct, int fieldValue) {
        struct.set(use_bytearray$LAYOUT, use_bytearray$OFFSET, fieldValue);
    }

    private static final OfInt overallocate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int overallocate
     * }
     */
    public static final OfInt overallocate$layout() {
        return overallocate$LAYOUT;
    }

    private static final long overallocate$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int overallocate
     * }
     */
    public static final long overallocate$offset() {
        return overallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int overallocate
     * }
     */
    public static int overallocate(MemorySegment struct) {
        return struct.get(overallocate$LAYOUT, overallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int overallocate
     * }
     */
    public static void overallocate(MemorySegment struct, int fieldValue) {
        struct.set(overallocate$LAYOUT, overallocate$OFFSET, fieldValue);
    }

    private static final OfInt use_small_buffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_small_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_small_buffer
     * }
     */
    public static final OfInt use_small_buffer$layout() {
        return use_small_buffer$LAYOUT;
    }

    private static final long use_small_buffer$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_small_buffer
     * }
     */
    public static final long use_small_buffer$offset() {
        return use_small_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_small_buffer
     * }
     */
    public static int use_small_buffer(MemorySegment struct) {
        return struct.get(use_small_buffer$LAYOUT, use_small_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_small_buffer
     * }
     */
    public static void use_small_buffer(MemorySegment struct, int fieldValue) {
        struct.set(use_small_buffer$LAYOUT, use_small_buffer$OFFSET, fieldValue);
    }

    private static final SequenceLayout small_buffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("small_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static final SequenceLayout small_buffer$layout() {
        return small_buffer$LAYOUT;
    }

    private static final long small_buffer$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static final long small_buffer$offset() {
        return small_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static MemorySegment small_buffer(MemorySegment struct) {
        return struct.asSlice(small_buffer$OFFSET, small_buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static void small_buffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, small_buffer$OFFSET, small_buffer$LAYOUT.byteSize());
    }

    private static long[] small_buffer$DIMS = { 512 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static long[] small_buffer$dimensions() {
        return small_buffer$DIMS;
    }
    private static final VarHandle small_buffer$ELEM_HANDLE = small_buffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static byte small_buffer(MemorySegment struct, long index0) {
        return (byte)small_buffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char small_buffer[512]
     * }
     */
    public static void small_buffer(MemorySegment struct, long index0, byte fieldValue) {
        small_buffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

