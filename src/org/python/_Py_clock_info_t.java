// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     const char *implementation;
 *     int monotonic;
 *     int adjustable;
 *     double resolution;
 * }
 * }
 */
public class _Py_clock_info_t {

    _Py_clock_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("implementation"),
        Python_h.C_INT.withName("monotonic"),
        Python_h.C_INT.withName("adjustable"),
        Python_h.C_DOUBLE.withName("resolution")
    ).withName("$anon$232:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout implementation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("implementation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *implementation
     * }
     */
    public static final AddressLayout implementation$layout() {
        return implementation$LAYOUT;
    }

    private static final long implementation$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *implementation
     * }
     */
    public static final long implementation$offset() {
        return implementation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *implementation
     * }
     */
    public static MemorySegment implementation(MemorySegment struct) {
        return struct.get(implementation$LAYOUT, implementation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *implementation
     * }
     */
    public static void implementation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(implementation$LAYOUT, implementation$OFFSET, fieldValue);
    }

    private static final OfInt monotonic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("monotonic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int monotonic
     * }
     */
    public static final OfInt monotonic$layout() {
        return monotonic$LAYOUT;
    }

    private static final long monotonic$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int monotonic
     * }
     */
    public static final long monotonic$offset() {
        return monotonic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int monotonic
     * }
     */
    public static int monotonic(MemorySegment struct) {
        return struct.get(monotonic$LAYOUT, monotonic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int monotonic
     * }
     */
    public static void monotonic(MemorySegment struct, int fieldValue) {
        struct.set(monotonic$LAYOUT, monotonic$OFFSET, fieldValue);
    }

    private static final OfInt adjustable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adjustable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int adjustable
     * }
     */
    public static final OfInt adjustable$layout() {
        return adjustable$LAYOUT;
    }

    private static final long adjustable$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int adjustable
     * }
     */
    public static final long adjustable$offset() {
        return adjustable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int adjustable
     * }
     */
    public static int adjustable(MemorySegment struct) {
        return struct.get(adjustable$LAYOUT, adjustable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int adjustable
     * }
     */
    public static void adjustable(MemorySegment struct, int fieldValue) {
        struct.set(adjustable$LAYOUT, adjustable$OFFSET, fieldValue);
    }

    private static final OfDouble resolution$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("resolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double resolution
     * }
     */
    public static final OfDouble resolution$layout() {
        return resolution$LAYOUT;
    }

    private static final long resolution$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double resolution
     * }
     */
    public static final long resolution$offset() {
        return resolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double resolution
     * }
     */
    public static double resolution(MemorySegment struct) {
        return struct.get(resolution$LAYOUT, resolution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double resolution
     * }
     */
    public static void resolution(MemorySegment struct, double fieldValue) {
        struct.set(resolution$LAYOUT, resolution$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

